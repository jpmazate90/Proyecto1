/* The following code was generated by JFlex 1.7.0 */

/* codigo de usuario */
package Analizadores;

import java_cup.runtime.*;
 import java.util.Date;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/jcsr/Desktop/jflex.flex</tt>
 */
public class AnalizadorLexico1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\0\1\63"+
    "\1\55\1\10\10\0\1\10\1\0\1\62\12\53\2\0\1\60\1\64"+
    "\1\61\2\0\1\3\1\5\1\7\1\11\1\13\1\14\1\15\1\16"+
    "\1\20\1\21\1\10\1\23\1\25\1\27\1\31\1\33\1\35\1\37"+
    "\1\41\1\43\1\45\1\47\1\50\1\51\1\10\1\52\1\56\1\0"+
    "\1\57\1\0\1\54\1\0\1\2\1\4\1\6\1\10\1\12\1\10"+
    "\1\10\1\10\1\17\1\10\1\10\1\22\1\24\1\26\1\30\1\32"+
    "\1\34\1\36\1\40\1\42\1\44\1\46\1\10\1\10\1\10\1\10"+
    "\1\0\1\65\124\0\1\0\37\0\1\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff1e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\22\0\1\3\13\0\1\4"+
    "\24\0\1\5\11\0\1\6\31\0\1\7\25\0\1\10"+
    "\14\0\1\11\5\0\1\12\13\0\1\13\2\0\1\14"+
    "\4\0\1\15\10\0\1\16\6\0\1\17\12\0\1\20"+
    "\4\0\1\21\1\0\1\22\2\0\1\23\2\0\1\24"+
    "\3\0\1\25\5\0\1\26\1\27\1\30\2\0\1\31"+
    "\4\0\1\32\107\0\1\33\53\0\1\34\44\0\1\35"+
    "\1\36\2\0\1\37\1\40\17\0\1\41\1\0\1\42"+
    "\1\43\2\0\1\44\1\0\1\45\16\0\1\46\1\47"+
    "\30\0\1\50\12\0\1\51\1\0\1\52\6\0\1\53"+
    "\27\0\1\54\6\0\1\55\1\0\1\56\5\0\1\57"+
    "\1\0\1\60\3\0\1\61\6\0\1\62\1\0\1\63"+
    "\2\0\1\64\2\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[517];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\242\0\154\0\330\0\u010e"+
    "\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\242\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\66"+
    "\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\66\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\66\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\66\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0"+
    "\0\u1116\0\u114c\0\u1182\0\u11b8\0\66\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba"+
    "\0\u15f0\0\u1626\0\66\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734"+
    "\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\66"+
    "\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\66\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\66\0\u1c44\0\u1c7a\0\66\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\66\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96"+
    "\0\u1ecc\0\u1f02\0\66\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010"+
    "\0\u2046\0\66\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\66\0\u2298\0\u22ce\0\u2304"+
    "\0\u233a\0\66\0\u2370\0\66\0\u23a6\0\u23dc\0\66\0\u2412"+
    "\0\u2448\0\66\0\u247e\0\u24b4\0\u24ea\0\66\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\66\0\66\0\66\0\u262e\0\u2664"+
    "\0\66\0\u269a\0\u26d0\0\u2706\0\u273c\0\66\0\u2772\0\u27a8"+
    "\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958"+
    "\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8"+
    "\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68"+
    "\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018"+
    "\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8"+
    "\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378"+
    "\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528"+
    "\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\66\0\u366c\0\u36a2"+
    "\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852"+
    "\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02"+
    "\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2"+
    "\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62"+
    "\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12"+
    "\0\u3f48\0\66\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c"+
    "\0\u40c2\0\u40f8\0\u412e\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c"+
    "\0\u4272\0\u42a8\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec"+
    "\0\u4422\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c"+
    "\0\u45d2\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0\0\66\0\66"+
    "\0\u4716\0\u474c\0\66\0\66\0\u4782\0\u47b8\0\u47ee\0\u4824"+
    "\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932\0\u4968\0\u499e\0\u49d4"+
    "\0\u4a0a\0\u4a40\0\u4a76\0\66\0\u4aac\0\66\0\66\0\u4ae2"+
    "\0\u4b18\0\66\0\u4b4e\0\66\0\u4b84\0\u4bba\0\u4bf0\0\u4c26"+
    "\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6"+
    "\0\u4e0c\0\u4e42\0\66\0\66\0\u4e78\0\u4eae\0\u4ee4\0\u4f1a"+
    "\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028\0\u505e\0\u5094\0\u50ca"+
    "\0\u5100\0\u5136\0\u516c\0\u51a2\0\u51d8\0\u520e\0\u5244\0\u527a"+
    "\0\u52b0\0\u52e6\0\u531c\0\u5352\0\66\0\u5388\0\u53be\0\u53f4"+
    "\0\u542a\0\u5460\0\u5496\0\u54cc\0\u5502\0\u5538\0\u556e\0\66"+
    "\0\u55a4\0\66\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\u56e8"+
    "\0\66\0\u571e\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u5862"+
    "\0\u5898\0\u58ce\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12"+
    "\0\u5a48\0\u5a7e\0\u5ab4\0\u5aea\0\u5b20\0\u5b56\0\u5b8c\0\u5bc2"+
    "\0\66\0\u5bf8\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06\0\66"+
    "\0\u5d3c\0\66\0\u5d72\0\u5da8\0\u5dde\0\u5e14\0\u5e4a\0\66"+
    "\0\u5e80\0\66\0\u5eb6\0\u5eec\0\u5f22\0\66\0\u5f58\0\u5f8e"+
    "\0\u5fc4\0\u5ffa\0\u6030\0\u6066\0\66\0\u609c\0\66\0\u60d2"+
    "\0\u6108\0\66\0\u613e\0\u6174\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[517];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\54\2\1\4\1\2\1\5\4\2\1\3"+
    "\67\0\1\6\5\7\1\10\1\7\1\11\6\7\1\12"+
    "\1\13\3\7\1\14\5\7\1\15\7\7\1\16\3\7"+
    "\1\17\3\7\1\20\1\7\1\21\7\0\1\6\1\0"+
    "\1\22\2\23\6\0\2\24\16\0\2\25\26\0\1\26"+
    "\2\0\1\22\1\0\1\27\53\7\2\0\1\30\5\0"+
    "\1\31\1\0\1\27\11\7\1\32\41\7\2\0\1\30"+
    "\5\0\1\31\1\0\1\27\11\7\1\33\41\7\2\0"+
    "\1\30\5\0\1\31\1\0\1\27\23\7\1\34\24\7"+
    "\1\35\2\7\2\0\1\30\5\0\1\31\1\0\1\27"+
    "\43\7\1\36\7\7\2\0\1\30\5\0\1\31\1\0"+
    "\1\27\11\7\1\37\41\7\2\0\1\30\5\0\1\31"+
    "\1\0\1\27\1\7\1\40\51\7\2\0\1\30\5\0"+
    "\1\31\1\0\1\27\16\7\1\41\34\7\2\0\1\30"+
    "\5\0\1\31\1\0\1\27\16\7\1\42\34\7\2\0"+
    "\1\30\5\0\1\31\1\0\1\43\51\7\1\20\1\7"+
    "\2\0\1\44\5\0\1\45\3\0\1\46\1\0\1\46"+
    "\1\0\1\46\1\0\1\46\1\0\2\46\36\0\1\46"+
    "\20\0\2\47\32\0\2\50\64\0\2\51\24\0\2\52"+
    "\63\0\1\26\2\53\6\0\2\54\16\0\2\55\31\0"+
    "\1\26\1\0\1\27\55\0\1\30\5\0\1\31\1\0"+
    "\1\31\53\56\2\0\1\30\5\0\1\31\1\0\1\27"+
    "\25\7\1\57\25\7\2\0\1\30\5\0\1\31\1\0"+
    "\1\27\35\7\1\60\15\7\2\0\1\30\5\0\1\31"+
    "\1\0\1\27\1\7\1\61\51\7\2\0\1\30\5\0"+
    "\1\31\1\0\1\27\33\7\1\62\17\7\2\0\1\30"+
    "\5\0\1\31\1\0\1\27\37\7\1\63\13\7\2\0"+
    "\1\30\5\0\1\31\1\0\1\27\25\7\1\64\25\7"+
    "\2\0\1\30\5\0\1\31\1\0\1\27\35\7\1\65"+
    "\15\7\2\0\1\30\5\0\1\31\1\0\1\27\41\7"+
    "\1\66\11\7\2\0\1\30\5\0\1\31\1\0\1\27"+
    "\7\7\1\67\43\7\2\0\1\30\5\0\1\31\1\0"+
    "\1\43\55\0\1\44\5\0\1\45\1\0\1\45\53\56"+
    "\2\0\1\44\5\0\1\45\1\0\1\70\1\0\1\46"+
    "\1\0\1\46\1\0\1\46\1\0\1\46\1\0\2\46"+
    "\36\0\1\46\3\0\1\71\5\0\1\70\6\0\2\72"+
    "\114\0\2\73\45\0\2\74\103\0\2\75\34\0\2\76"+
    "\32\0\2\77\64\0\2\100\24\0\2\101\63\0\1\102"+
    "\53\56\2\0\1\103\5\0\1\104\1\0\1\27\41\7"+
    "\1\105\11\7\2\0\1\30\5\0\1\31\1\0\1\27"+
    "\11\7\1\106\41\7\2\0\1\30\5\0\1\31\1\0"+
    "\1\27\13\7\1\107\37\7\2\0\1\30\5\0\1\31"+
    "\1\0\1\27\43\7\1\110\7\7\2\0\1\30\5\0"+
    "\1\31\1\0\1\27\41\7\1\111\11\7\2\0\1\30"+
    "\5\0\1\31\1\0\1\27\43\7\1\112\7\7\2\0"+
    "\1\30\5\0\1\31\1\0\1\27\35\7\1\113\15\7"+
    "\2\0\1\30\5\0\1\31\1\0\1\27\43\7\1\114"+
    "\7\7\2\0\1\30\5\0\1\31\1\0\1\27\11\7"+
    "\1\115\41\7\2\0\1\30\5\0\1\31\1\0\1\70"+
    "\55\0\1\71\5\0\1\70\17\0\2\116\64\0\2\117"+
    "\101\0\2\120\32\0\2\121\70\0\2\122\114\0\2\123"+
    "\45\0\2\124\103\0\2\125\27\0\1\102\55\0\1\103"+
    "\5\0\1\104\1\0\1\104\53\126\2\0\1\103\5\0"+
    "\1\104\1\0\1\27\35\7\1\127\15\7\2\0\1\30"+
    "\5\0\1\31\1\0\1\27\5\7\1\130\45\7\2\0"+
    "\1\30\5\0\1\31\1\0\1\27\11\7\1\131\41\7"+
    "\2\0\1\30\5\0\1\31\1\0\1\27\16\7\1\132"+
    "\34\7\2\0\1\30\5\0\1\31\1\0\1\27\16\7"+
    "\1\133\34\7\2\0\1\30\5\0\1\31\1\0\1\134"+
    "\53\7\2\0\1\135\5\0\1\136\1\0\1\27\1\7"+
    "\1\137\51\7\2\0\1\30\5\0\1\31\1\0\1\27"+
    "\21\7\1\140\31\7\2\0\1\30\5\0\1\31\1\0"+
    "\1\27\27\7\1\141\23\7\2\0\1\30\5\0\1\31"+
    "\30\0\2\142\40\0\2\143\124\0\2\144\44\0\2\145"+
    "\57\0\2\146\64\0\2\147\101\0\2\150\32\0\2\151"+
    "\63\0\1\152\53\126\2\0\1\103\5\0\1\104\1\0"+
    "\1\27\1\7\1\153\51\7\2\0\1\30\5\0\1\31"+
    "\1\0\1\27\14\7\1\154\36\7\2\0\1\30\5\0"+
    "\1\31\1\0\1\27\25\7\1\155\25\7\2\0\1\30"+
    "\5\0\1\31\1\0\1\27\11\7\1\156\41\7\2\0"+
    "\1\30\5\0\1\31\1\0\1\27\12\7\1\157\40\7"+
    "\2\0\1\30\5\0\1\31\1\0\1\134\55\0\1\135"+
    "\5\0\1\136\1\0\1\136\53\56\2\0\1\135\5\0"+
    "\1\136\1\0\1\27\12\7\1\160\40\7\2\0\1\30"+
    "\5\0\1\31\1\0\1\27\27\7\1\161\23\7\2\0"+
    "\1\30\5\0\1\31\1\0\1\162\53\7\2\0\1\163"+
    "\5\0\1\164\26\0\2\165\102\0\2\166\32\0\2\167"+
    "\64\0\2\170\102\0\2\171\40\0\2\172\124\0\2\173"+
    "\44\0\2\174\41\0\1\152\55\0\1\103\5\0\1\152"+
    "\1\0\1\27\35\7\1\175\15\7\2\0\1\30\5\0"+
    "\1\31\1\0\1\27\1\7\1\176\51\7\2\0\1\30"+
    "\5\0\1\31\1\0\1\177\53\7\2\0\1\200\5\0"+
    "\1\201\1\0\1\27\35\7\1\202\15\7\2\0\1\30"+
    "\5\0\1\31\1\0\1\27\16\7\1\203\34\7\2\0"+
    "\1\30\5\0\1\31\1\0\1\27\27\7\1\204\23\7"+
    "\2\0\1\30\5\0\1\31\1\0\1\205\53\7\2\0"+
    "\1\206\5\0\1\207\1\0\1\162\55\0\1\163\5\0"+
    "\1\164\1\0\1\164\53\56\2\0\1\163\5\0\1\164"+
    "\1\0\1\210\10\0\2\211\51\0\1\210\42\0\2\212"+
    "\64\0\2\213\64\0\2\214\50\0\2\215\102\0\2\216"+
    "\32\0\2\217\64\0\2\220\53\0\1\221\53\7\2\0"+
    "\1\222\5\0\1\223\1\0\1\224\53\7\2\0\1\225"+
    "\5\0\1\226\1\0\1\177\55\0\1\200\5\0\1\201"+
    "\1\0\1\201\53\56\2\0\1\200\5\0\1\201\1\0"+
    "\1\27\7\7\1\227\43\7\2\0\1\30\5\0\1\31"+
    "\1\0\1\27\5\7\1\230\45\7\2\0\1\30\5\0"+
    "\1\31\1\0\1\231\53\7\2\0\1\232\5\0\1\233"+
    "\1\0\1\205\55\0\1\206\5\0\1\207\1\0\1\207"+
    "\53\56\2\0\1\206\5\0\1\207\1\0\1\210\24\0"+
    "\2\234\35\0\1\210\40\0\2\235\54\0\2\236\36\0"+
    "\2\237\120\0\2\240\27\0\1\241\10\0\2\242\45\0"+
    "\1\243\3\0\1\241\42\0\2\244\64\0\2\245\64\0"+
    "\2\246\23\0\1\221\55\0\1\222\5\0\1\223\1\0"+
    "\1\223\53\56\2\0\1\222\5\0\1\223\1\0\1\224"+
    "\55\0\1\225\5\0\1\226\1\0\1\226\53\56\2\0"+
    "\1\225\5\0\1\226\1\0\1\27\1\7\1\247\51\7"+
    "\2\0\1\30\5\0\1\31\1\0\1\27\1\7\1\250"+
    "\51\7\2\0\1\30\5\0\1\31\1\0\1\231\55\0"+
    "\1\232\5\0\1\233\1\0\1\233\53\56\2\0\1\232"+
    "\5\0\1\233\30\0\2\251\35\0\1\235\57\0\1\252"+
    "\3\0\1\235\1\0\1\253\36\0\2\254\23\0\1\253"+
    "\1\0\1\255\36\0\2\256\23\0\1\255\30\0\2\257"+
    "\35\0\1\241\57\0\1\243\3\0\1\241\40\0\2\260"+
    "\54\0\2\261\36\0\2\262\120\0\2\263\27\0\1\264"+
    "\53\7\2\0\1\265\5\0\1\266\1\0\1\27\35\7"+
    "\1\267\15\7\2\0\1\30\5\0\1\31\24\0\2\270"+
    "\41\0\1\253\24\0\2\271\35\0\1\253\1\0\1\254"+
    "\57\0\1\272\3\0\1\254\1\0\1\255\44\0\2\273"+
    "\15\0\1\255\1\0\1\256\57\0\1\274\3\0\1\256"+
    "\1\0\1\275\36\0\2\276\23\0\1\275\1\0\1\260"+
    "\57\0\1\277\3\0\1\260\1\0\1\300\36\0\2\301"+
    "\17\0\1\302\3\0\1\300\40\0\2\303\54\0\2\304"+
    "\35\0\1\264\55\0\1\265\5\0\1\266\1\0\1\266"+
    "\53\56\2\0\1\265\5\0\1\266\1\0\1\305\53\7"+
    "\2\0\1\306\5\0\1\307\4\0\2\310\110\0\2\311"+
    "\36\0\2\312\63\0\1\275\24\0\2\313\35\0\1\275"+
    "\1\0\1\276\57\0\1\314\3\0\1\276\1\0\1\300"+
    "\57\0\1\302\3\0\1\300\1\0\1\301\57\0\1\315"+
    "\3\0\1\301\1\0\1\303\57\0\1\316\3\0\1\303"+
    "\1\0\1\317\36\0\2\320\17\0\1\321\3\0\1\317"+
    "\1\0\1\305\55\0\1\306\5\0\1\307\1\0\1\307"+
    "\53\56\2\0\1\306\5\0\1\307\36\0\2\322\52\0"+
    "\2\323\62\0\2\324\72\0\2\325\35\0\1\317\57\0"+
    "\1\321\3\0\1\317\1\0\1\320\57\0\1\326\3\0"+
    "\1\320\12\0\2\327\56\0\2\330\110\0\2\331\60\0"+
    "\2\332\41\0\1\327\62\0\1\333\1\327\36\0\2\334"+
    "\64\0\2\335\32\0\2\336\61\0\1\333\61\0\1\337"+
    "\1\0\1\333\12\0\2\340\53\0\1\335\62\0\1\341"+
    "\1\335\36\0\2\342\27\0\1\337\1\0\1\343\1\0"+
    "\1\344\17\0\1\345\1\0\1\346\35\0\1\337\1\0"+
    "\1\340\62\0\1\347\1\340\1\0\1\341\61\0\1\350"+
    "\1\0\1\341\12\0\2\351\67\0\1\352\101\0\1\353"+
    "\65\0\1\354\101\0\1\355\21\0\1\347\61\0\1\356"+
    "\1\0\1\347\1\0\1\350\53\357\10\0\1\350\1\0"+
    "\1\351\62\0\1\360\1\351\37\0\1\361\65\0\1\362"+
    "\37\0\1\363\67\0\1\364\53\0\1\356\1\0\1\365"+
    "\3\0\1\366\2\0\2\367\15\0\1\370\1\0\1\371"+
    "\7\0\1\372\21\0\1\356\1\0\1\373\53\357\6\0"+
    "\1\374\1\0\1\373\1\0\1\360\61\0\1\375\1\0"+
    "\1\360\13\0\1\376\111\0\1\377\46\0\1\u0100\114\0"+
    "\1\u0101\41\0\1\u0102\3\0\1\u0103\67\0\1\u0104\76\0"+
    "\2\u0105\61\0\1\u0106\31\0\1\u0107\75\0\1\u0108\53\0"+
    "\1\373\61\0\1\374\1\0\1\373\1\0\1\374\60\0"+
    "\1\u0109\2\0\1\374\1\0\1\375\5\0\1\u010a\4\0"+
    "\1\u010b\3\0\1\u010c\12\0\1\u010d\5\0\1\u010e\1\0"+
    "\1\u010f\1\0\1\u0110\17\0\1\375\15\0\1\u0111\53\0"+
    "\1\u0112\76\0\1\u0113\54\0\1\u0114\25\0\1\u0115\54\0"+
    "\1\u0116\22\0\1\u0117\31\0\1\u0118\101\0\1\u0119\61\0"+
    "\2\u011a\65\0\1\u011b\56\0\1\u011c\125\0\1\u011d\15\0"+
    "\1\u0109\57\0\1\u011e\3\0\1\u0109\23\0\1\u011f\55\0"+
    "\1\u0120\63\0\1\u0121\57\0\1\u0122\102\0\1\u0123\65\0"+
    "\1\u0124\106\0\1\u0125\27\0\1\u0126\121\0\1\u0127\46\0"+
    "\1\u0128\121\0\1\u0129\65\0\1\u012a\40\0\1\u012b\103\0"+
    "\1\u012c\36\0\1\u012d\100\0\1\u012e\70\0\2\u012f\45\0"+
    "\1\u0130\107\0\1\u0131\71\0\1\u0132\25\0\1\u0133\71\0"+
    "\1\u0134\57\0\1\u0121\61\0\1\u0135\1\0\1\u0121\11\0"+
    "\1\u0136\3\0\1\u0137\113\0\1\u0138\65\0\1\u0139\67\0"+
    "\1\u013a\57\0\1\u013b\102\0\1\u013c\20\0\1\u013d\111\0"+
    "\1\u013e\73\0\1\u013f\37\0\1\u0140\111\0\1\u0141\57\0"+
    "\1\u0142\73\0\1\u0143\72\0\2\u0144\33\0\1\u0145\65\0"+
    "\1\u0146\103\0\1\u0147\75\0\1\u0148\42\0\1\u0149\50\0"+
    "\1\u0135\57\0\1\u014a\3\0\1\u0135\37\0\1\u014b\46\0"+
    "\1\u014c\65\0\1\u014d\112\0\1\u014e\23\0\1\u014f\136\0"+
    "\1\u0150\20\0\1\u0151\23\0\1\u0152\5\0\1\u0153\27\0"+
    "\1\u0154\65\0\1\u0155\102\0\1\u0156\50\0\1\u0157\65\0"+
    "\1\u0158\63\0\1\u0142\61\0\1\u0159\1\0\1\u0142\1\0"+
    "\1\u0143\61\0\1\u015a\1\0\1\u0143\12\0\2\u015b\101\0"+
    "\1\u015c\37\0\1\u0146\61\0\1\u015d\1\0\1\u0146\1\0"+
    "\1\u0147\61\0\1\u015e\1\0\1\u0147\13\0\1\u015f\55\0"+
    "\1\u0160\75\0\1\u0161\101\0\1\u0162\67\0\1\u0163\57\0"+
    "\1\u0164\101\0\1\u0165\35\0\1\u0166\107\0\1\u0167\37\0"+
    "\1\u0168\102\0\1\u0169\104\0\1\u016a\43\0\1\u016b\113\0"+
    "\1\u016c\31\0\1\u016d\57\0\1\u0158\61\0\1\u016e\1\0"+
    "\1\u0158\1\0\1\u0159\57\0\1\u016f\3\0\1\u0159\1\0"+
    "\1\u015a\57\0\1\u0170\3\0\1\u015a\42\0\2\u0171\23\0"+
    "\1\u015c\61\0\1\u0172\1\0\1\u015c\1\0\1\u015d\57\0"+
    "\1\u0173\3\0\1\u015d\1\0\1\u015e\57\0\1\u0174\3\0"+
    "\1\u015e\1\0\1\u015f\61\0\1\u0175\1\0\1\u015f\54\0"+
    "\1\u0176\12\0\1\u0161\61\0\1\u0177\1\0\1\u0161\3\0"+
    "\1\u0178\63\0\1\u0163\61\0\1\u0179\1\0\1\u0163\31\0"+
    "\1\u017a\54\0\1\u017b\76\0\1\u017c\61\0\1\u017d\55\0"+
    "\1\u017e\113\0\1\u017f\76\0\1\u0180\31\0\1\u0181\65\0"+
    "\1\u0182\65\0\1\u0183\46\0\1\u016e\57\0\1\u0184\3\0"+
    "\1\u016e\2\0\2\u0185\63\0\1\u0172\57\0\1\u0186\3\0"+
    "\1\u0172\1\0\1\u0175\57\0\1\u0187\3\0\1\u0175\7\0"+
    "\1\u0188\15\0\1\u0189\41\0\1\u0177\57\0\1\u018a\3\0"+
    "\1\u0177\1\0\1\u0178\61\0\1\u018b\1\0\1\u0178\1\0"+
    "\1\u0179\57\0\1\u018c\3\0\1\u0179\1\0\1\u017a\61\0"+
    "\1\u018d\1\0\1\u017a\31\0\1\u018e\61\0\1\u018f\73\0"+
    "\1\u0190\52\0\1\u0191\65\0\1\u0192\54\0\1\u0193\23\0"+
    "\1\u0194\61\0\1\u0195\67\0\1\u0196\65\0\1\u0197\74\0"+
    "\2\u0198\63\0\1\u0199\57\0\1\u019a\35\0\1\u018b\57\0"+
    "\1\u019b\3\0\1\u018b\1\0\1\u018d\57\0\1\u019c\3\0"+
    "\1\u018d\54\0\1\u019d\44\0\1\u019e\63\0\1\u019f\63\0"+
    "\1\u01a0\67\0\1\u01a1\65\0\1\u01a2\37\0\1\u01a3\65\0"+
    "\1\u01a4\136\0\1\u01a5\40\0\1\u01a6\37\0\1\u0198\61\0"+
    "\1\u01a7\1\0\1\u0198\13\0\1\u01a8\63\0\1\u01a9\63\0"+
    "\1\u01aa\15\0\1\u01ab\71\0\1\u01ac\63\0\1\u01ad\41\0"+
    "\1\u01ae\136\0\1\u01af\36\0\1\u01b0\55\0\1\u01b1\51\0"+
    "\1\u01a4\61\0\1\u01b2\1\0\1\u01a4\50\0\1\u01b3\16\0"+
    "\1\u01a6\61\0\1\u01b4\1\0\1\u01a6\1\0\1\u01a7\57\0"+
    "\1\u01b5\3\0\1\u01a7\3\0\1\u01b6\102\0\1\u01b7\104\0"+
    "\1\u01b8\57\0\1\u01b9\63\0\1\u01ba\51\0\1\u01bb\53\0"+
    "\1\u01ae\61\0\1\u01bc\1\0\1\u01ae\50\0\1\u01bd\50\0"+
    "\1\u01be\52\0\1\u01bf\46\0\1\u01b2\57\0\1\u01c0\3\0"+
    "\1\u01b2\13\0\1\u01c1\53\0\1\u01b4\57\0\1\u01c2\3\0"+
    "\1\u01b4\7\0\1\u01c3\72\0\1\u01c4\64\0\1\u01c5\63\0"+
    "\1\u01c6\67\0\1\u01c7\101\0\1\u01c8\37\0\1\u01bc\57\0"+
    "\1\u01c9\3\0\1\u01bc\13\0\1\u01ca\103\0\1\u01cb\63\0"+
    "\1\u01cc\43\0\1\u01cd\100\0\1\u01ce\65\0\1\u01cf\50\0"+
    "\1\u01d0\102\0\1\u01d1\74\0\1\u01d2\101\0\1\u01d3\27\0"+
    "\1\u01d4\107\0\1\u01d5\41\0\1\u01d6\63\0\1\u01cd\61\0"+
    "\1\u01d7\1\0\1\u01cd\31\0\1\u01d8\43\0\1\u01d9\65\0"+
    "\1\u01da\72\0\1\u01db\114\0\1\u01dc\35\0\1\u01dd\53\0"+
    "\1\u01d4\61\0\1\u01de\1\0\1\u01d4\13\0\1\u01df\53\0"+
    "\1\u01d6\61\0\1\u01e0\1\0\1\u01d6\1\0\1\u01d7\57\0"+
    "\1\u01e1\3\0\1\u01d7\27\0\1\u01e2\41\0\1\u01e3\102\0"+
    "\1\u01e4\65\0\1\u01e5\60\0\1\u01e6\53\0\1\u01dd\61\0"+
    "\1\u01e7\1\0\1\u01dd\1\0\1\u01de\57\0\1\u01e8\3\0"+
    "\1\u01de\27\0\1\u01e9\37\0\1\u01e0\57\0\1\u01ea\3\0"+
    "\1\u01e0\1\0\1\u01e2\61\0\1\u01eb\1\0\1\u01e2\7\0"+
    "\1\u01ec\107\0\1\u01ed\43\0\1\u01ee\57\0\1\u01e6\61\0"+
    "\1\u01ef\1\0\1\u01e6\1\0\1\u01e7\57\0\1\u01f0\3\0"+
    "\1\u01e7\43\0\1\u01f1\23\0\1\u01eb\57\0\1\u01f2\3\0"+
    "\1\u01eb\20\0\1\u01f3\74\0\1\u01f4\41\0\1\u01f5\63\0"+
    "\1\u01ef\57\0\1\u01f6\3\0\1\u01ef\13\0\1\u01f7\103\0"+
    "\1\u01f8\35\0\1\u01f4\61\0\1\u01f9\1\0\1\u01f4\7\0"+
    "\1\u01fa\57\0\1\u01f7\61\0\1\u01fb\1\0\1\u01f7\27\0"+
    "\1\u01fc\37\0\1\u01f9\57\0\1\u01fd\3\0\1\u01f9\20\0"+
    "\1\u01fe\46\0\1\u01fb\57\0\1\u01ff\3\0\1\u01fb\1\0"+
    "\1\u01fc\61\0\1\u0200\1\0\1\u01fc\31\0\1\u0201\35\0"+
    "\1\u0200\57\0\1\u0202\3\0\1\u0200\27\0\1\u0203\37\0"+
    "\1\u0203\61\0\1\u0204\1\0\1\u0203\1\0\1\u0204\57\0"+
    "\1\u0205\3\0\1\u0204";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25002];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\22\0\1\11\13\0\1\11\24\0"+
    "\1\11\11\0\1\11\31\0\1\11\25\0\1\11\14\0"+
    "\1\11\5\0\1\11\13\0\1\11\2\0\1\11\4\0"+
    "\1\11\10\0\1\11\6\0\1\11\12\0\1\11\4\0"+
    "\1\11\1\0\1\11\2\0\1\11\2\0\1\11\3\0"+
    "\1\11\5\0\3\11\2\0\1\11\4\0\1\11\107\0"+
    "\1\11\53\0\1\11\44\0\2\11\2\0\2\11\17\0"+
    "\1\11\1\0\2\11\2\0\1\11\1\0\1\11\16\0"+
    "\2\11\30\0\1\11\12\0\1\11\1\0\1\11\6\0"+
    "\1\11\27\0\1\11\6\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\0\1\11\3\0\1\11\6\0\1\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[517];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("simbolo no valido");
            } 
            // fall through
          case 54: break;
          case 2: 
            { /* IGNORAR */
            } 
            // fall through
          case 55: break;
          case 3: 
            { return symbol(sym.CORCHETE_ID);
            } 
            // fall through
          case 56: break;
          case 4: 
            { return symbol(sym.CORCHETE_NUMEROS);
            } 
            // fall through
          case 57: break;
          case 5: 
            { return symbol(sym.CORCHETE_HEXADECIMAL);
            } 
            // fall through
          case 58: break;
          case 6: 
            { return symbol(sym.CORCHETE_ETIQUETAS);
            } 
            // fall through
          case 59: break;
          case 7: 
            { return symbol(sym.CORCHETE_MENU);
            } 
            // fall through
          case 60: break;
          case 8: 
            { return symbol(sym.CORCHETE_VIDEO);
            } 
            // fall through
          case 61: break;
          case 9: 
            { return symbol(sym.CORCHETE_IMAGEN);
            } 
            // fall through
          case 62: break;
          case 10: 
            { return symbol(sym.CORCHETE_TITULO);
            } 
            // fall through
          case 63: break;
          case 11: 
            { return symbol(sym.CORCHETE_CENTRAR);
            } 
            // fall through
          case 64: break;
          case 12: 
            { return symbol(sym.CORCHETE_DERECHA);
            } 
            // fall through
          case 65: break;
          case 13: 
            { return symbol(sym.CORCHETE_PARRAFO);
            } 
            // fall through
          case 66: break;
          case 14: 
            { return symbol(sym.FIN_ACCION);
            } 
            // fall through
          case 67: break;
          case 15: 
            { return symbol(sym.INICIO_ACCIONES);
            } 
            // fall through
          case 68: break;
          case 16: 
            { return symbol(sym.CORCHETE_IZQUIERDA);
            } 
            // fall through
          case 69: break;
          case 17: 
            { return symbol(sym.INICIO_ATRIBUTOS);
            } 
            // fall through
          case 70: break;
          case 18: 
            { return symbol(sym.INICIO_ETIQUETAS);
            } 
            // fall through
          case 71: break;
          case 19: 
            { return symbol(sym.FIN_ACCIONES);
            } 
            // fall through
          case 72: break;
          case 20: 
            { return symbol(sym.FIN_ATRIBUTO);
            } 
            // fall through
          case 73: break;
          case 21: 
            { return symbol(sym.CORCHETE_JUSTIFICAR);
            } 
            // fall through
          case 74: break;
          case 22: 
            { return symbol(sym.INICIO_PARAMETROS);
            } 
            // fall through
          case 75: break;
          case 23: 
            { return symbol(sym.FIN_ATRIBUTOS);
            } 
            // fall through
          case 76: break;
          case 24: 
            { return symbol(sym.FIN_ETIQUETAS);
            } 
            // fall through
          case 77: break;
          case 25: 
            { return symbol(sym.FIN_PARAMETRO);
            } 
            // fall through
          case 78: break;
          case 26: 
            { return symbol(sym.FIN_PARAMETROS);
            } 
            // fall through
          case 79: break;
          case 27: 
            { return symbol(sym.INICIO_ETIQUETA_ID);
            } 
            // fall through
          case 80: break;
          case 28: 
            { return symbol(sym.INICIO_PARAMETRO_ID);
            } 
            // fall through
          case 81: break;
          case 29: 
            { return symbol(sym.INICIO_ATRIBUTO_ANCHO);
            } 
            // fall through
          case 82: break;
          case 30: 
            { return symbol(sym.INICIO_ATRIBUTO_COLOR);
            } 
            // fall through
          case 83: break;
          case 31: 
            { return symbol(sym.INICIO_ATRIBUTO_PADRE);
            } 
            // fall through
          case 84: break;
          case 32: 
            { return symbol(sym.INICIO_ATRIBUTO_TEXTO);
            } 
            // fall through
          case 85: break;
          case 33: 
            { return symbol(sym.INICIO_ATRIBUTO_ALTURA);
            } 
            // fall through
          case 86: break;
          case 34: 
            { return symbol(sym.INICIO_ATRIBUTO_ORIGEN);
            } 
            // fall through
          case 87: break;
          case 35: 
            { return symbol(sym.INICIO_PARAMETRO_CLASE);
            } 
            // fall through
          case 88: break;
          case 36: 
            { return symbol(sym.INICIO_PARAMETRO_PADRE);
            } 
            // fall through
          case 89: break;
          case 37: 
            { return symbol(sym.INICIO_PARAMETRO_SITIO);
            } 
            // fall through
          case 90: break;
          case 38: 
            { return symbol(sym.INICIO_PARAMETRO_PAGINA);
            } 
            // fall through
          case 91: break;
          case 39: 
            { return symbol(sym.INICIO_PARAMETRO_TITULO);
            } 
            // fall through
          case 92: break;
          case 40: 
            { return symbol(sym.INICIO_ATRIBUTO_ETIQUETAS);
            } 
            // fall through
          case 93: break;
          case 41: 
            { return symbol(sym.INICIO_NUEVA_PAGINA);
            } 
            // fall through
          case 94: break;
          case 42: 
            { return symbol(sym.INICIO_ATRIBUTO_ALINEACION);
            } 
            // fall through
          case 95: break;
          case 43: 
            { return symbol(sym.INICIO_BORRAR_PAGINA);
            } 
            // fall through
          case 96: break;
          case 44: 
            { return symbol(sym.INICIO_NUEVO_SITIO_WEB);
            } 
            // fall through
          case 97: break;
          case 45: 
            { return symbol(sym.INICIO_BORRAR_SITIO_WEB);
            } 
            // fall through
          case 98: break;
          case 46: 
            { return symbol(sym.INICIO_MODIFICAR_PAGINA);
            } 
            // fall through
          case 99: break;
          case 47: 
            { return symbol(sym.INICIO_BORRAR_COMPONENTE);
            } 
            // fall through
          case 100: break;
          case 48: 
            { return symbol(sym.INICIO_PARAMETRO_FECHA_CREACION);
            } 
            // fall through
          case 101: break;
          case 49: 
            { return symbol(sym.INICIO_AGREGAR_COMPONENTE);
            } 
            // fall through
          case 102: break;
          case 50: 
            { return symbol(sym.INICIO_PARAMETRO_USUARIO_CREACION);
            } 
            // fall through
          case 103: break;
          case 51: 
            { return symbol(sym.INICIO_MODIFICAR_COMPONENTE);
            } 
            // fall through
          case 104: break;
          case 52: 
            { return symbol(sym.INICIO_PARAMETRO_FECHA_MODIFICACION);
            } 
            // fall through
          case 105: break;
          case 53: 
            { return symbol(sym.INICIO_PARAMETRO_USUARIO_MODIFICACION);
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico1 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico1 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico1(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
