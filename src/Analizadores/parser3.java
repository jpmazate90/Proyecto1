//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package Analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import Logica.Acciones;
import java_cup.runtime.XMLElement;
import javax.swing.JTextArea;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser3 extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym3.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public parser3() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public parser3(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser3(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\007\000\002\002\004\000\002\002\003\000\002\002"
        + "\003\000\002\003\007\000\002\005\004\000\002\005\003"
        + "\000\002\004\007"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\021\000\006\004\010\006\005\001\002\000\004\002"
        + "\023\001\002\000\004\010\017\001\002\000\004\002\000"
        + "\001\002\000\004\002\uffff\001\002\000\004\010\011\001"
        + "\002\000\004\012\012\001\002\000\006\011\ufffc\012\ufffc"
        + "\001\002\000\006\011\014\012\015\001\002\000\004\005"
        + "\016\001\002\000\006\011\ufffd\012\ufffd\001\002\000\004"
        + "\002\ufffe\001\002\000\004\012\012\001\002\000\006\011"
        + "\021\012\015\001\002\000\004\007\022\001\002\000\004"
        + "\002\ufffb\001\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\021\000\010\002\003\003\005\004\006\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\005\012\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\005\017\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    String lexema = "";
    JTextArea area;

    public void crearLexema(String mandar) {
        if (lexema.equals("")) {
            lexema = mandar;
        } else {
            lexema = lexema + " " + mandar;
        }
    }

    // Connect this parser to a scanner!
    public parser3(AnalizadorLexicoError lex, JTextArea area) {
        super(lex);
        this.area = area;

    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("Error " + cur_token);
    }

    public void mostrarMensaje(String mensaje, boolean error) {
        if (error == true) {
            area.append("\n");
            area.append("*****ERROR****");
            area.append("\n");
        } else {
            area.append("\n");
            area.append("*****MENSAJE****");
            area.append("\n");
        }

        area.append("\n");
        area.append(mensaje);
        area.append("\n");
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$parser$actions {

        private final parser3 parser;

        /**
         * Constructor
         */
        CUP$parser$actions(parser3 parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
                int CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack CUP$parser$stack,
                int CUP$parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

            /* select the action based on the action number */
            switch (CUP$parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= estructura_definitiva EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // estructura_definitiva ::= estructura_error 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // estructura_definitiva ::= estructura_mensaje 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // estructura_error ::= INICIO_ERROR CORCHETE_ABIERTO id CORCHETE_CERRADO FIN_ERROR 
                {
                    Object RESULT = null;

                    mostrarMensaje(lexema, true);
                    lexema = "";

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_error", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // id ::= id IDD 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("id", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // id ::= IDD 
                {
                    Object RESULT = null;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("id", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // estructura_mensaje ::= INICIO_MENSAJE CORCHETE_ABIERTO id CORCHETE_CERRADO FIN_MENSAJE 
                {
                    Object RESULT = null;

                    mostrarMensaje(lexema, false);
                    lexema = "";

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_mensaje", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$parser$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$parser$do_action(
                int CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack CUP$parser$stack,
                int CUP$parser$top)
                throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                    CUP$parser$act_num,
                    CUP$parser$parser,
                    CUP$parser$stack,
                    CUP$parser$top);
        }
    }

}
